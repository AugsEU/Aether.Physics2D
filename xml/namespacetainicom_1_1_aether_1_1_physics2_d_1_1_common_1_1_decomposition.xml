<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition" kind="namespace" language="C#">
    <compoundname>tainicom::Aether::Physics2D::Common::Decomposition</compoundname>
    <innerclass refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1_1_bayazit_decomposer" prot="package">tainicom::Aether::Physics2D::Common::Decomposition::BayazitDecomposer</innerclass>
    <innerclass refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1_1_c_d_t_decomposer" prot="package">tainicom::Aether::Physics2D::Common::Decomposition::CDTDecomposer</innerclass>
    <innerclass refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1_1_earclip_decomposer" prot="package">tainicom::Aether::Physics2D::Common::Decomposition::EarclipDecomposer</innerclass>
    <innerclass refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1_1_flipcode_decomposer" prot="package">tainicom::Aether::Physics2D::Common::Decomposition::FlipcodeDecomposer</innerclass>
    <innerclass refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1_1_seidel_decomposer" prot="package">tainicom::Aether::Physics2D::Common::Decomposition::SeidelDecomposer</innerclass>
    <innerclass refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1_1_triangulate" prot="public">tainicom::Aether::Physics2D::Common::Decomposition::Triangulate</innerclass>
    <innernamespace refid="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1_1_c_d_t">tainicom::Aether::Physics2D::Common::Decomposition::CDT</innernamespace>
    <innernamespace refid="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1_1_seidel">tainicom::Aether::Physics2D::Common::Decomposition::Seidel</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1aa2b1cda235a52272a12b9522898e850c" prot="public" static="no" strong="yes">
        <type></type>
        <name>TriangulationAlgorithm</name>
        <enumvalue id="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1aa2b1cda235a52272a12b9522898e850ca67ac673518d5cac732e925c3621006fd" prot="public">
          <name>Earclip</name>
          <briefdescription>
<para>Convex decomposition algorithm using ear clipping </para>
          </briefdescription>
          <detaileddescription>
<para>Properties:<itemizedlist>
<listitem><para>Only works on simple polygons.</para>
</listitem><listitem><para>Does not support holes.</para>
</listitem><listitem><para>Running time is O(n^2), n = number of vertices.</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1aa2b1cda235a52272a12b9522898e850ca666e685ea058b7188395cd99aa1b8a19" prot="public">
          <name>Bayazit</name>
          <briefdescription>
<para>Convex decomposition algorithm created by Mark Bayazit (<ulink url="http://mnbayazit.com/">http://mnbayazit.com/</ulink>) </para>
          </briefdescription>
          <detaileddescription>
<para>Properties:<itemizedlist>
<listitem><para>Tries to decompose using polygons instead of triangles.</para>
</listitem><listitem><para>Tends to produce optimal results with low processing time.</para>
</listitem><listitem><para>Running time is O(nr), n = number of vertices, r = reflex vertices.</para>
</listitem><listitem><para>Does not support holes.</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1aa2b1cda235a52272a12b9522898e850ca0efdbf579d7141aad03cab430e30307c" prot="public">
          <name>Flipcode</name>
          <briefdescription>
<para>Convex decomposition algorithm created by unknown </para>
          </briefdescription>
          <detaileddescription>
<para>Properties:<itemizedlist>
<listitem><para>No support for holes</para>
</listitem><listitem><para>Very fast</para>
</listitem><listitem><para>Only works on simple polygons</para>
</listitem><listitem><para>Only works on counter clockwise polygons</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1aa2b1cda235a52272a12b9522898e850caab178da569507fcd537f712af786ca97" prot="public">
          <name>Seidel</name>
          <briefdescription>
<para>Convex decomposition algorithm created by Raimund <ref refid="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1_1_seidel" kindref="compound">Seidel</ref> </para>
          </briefdescription>
          <detaileddescription>
<para>Properties:<itemizedlist>
<listitem><para>Decompose the polygon into trapezoids, then triangulate.</para>
</listitem><listitem><para>To use the trapezoid data, use ConvexPartitionTrapezoid()</para>
</listitem><listitem><para>Generate a lot of garbage due to incapsulation of the Poly2Tri library.</para>
</listitem><listitem><para>Running time is O(n log n), n = number of vertices.</para>
</listitem><listitem><para>Running time is almost linear for most simple polygons.</para>
</listitem><listitem><para>Does not care about winding order.</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1aa2b1cda235a52272a12b9522898e850cae998f071c4e86f59551b73d6762c1671" prot="public">
          <name>SeidelTrapezoids</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_decomposition_1aa2b1cda235a52272a12b9522898e850ca6601e04d7cfa7c4f369d32e14b0ff0e2" prot="public">
          <name>Delauny</name>
          <briefdescription>
<para>2D constrained Delaunay triangulation algorithm. Based on the paper &quot;Sweep-line algorithm for constrained Delaunay triangulation&quot; by V. Domiter and and B. Zalik </para>
          </briefdescription>
          <detaileddescription>
<para>Properties:<itemizedlist>
<listitem><para>Creates triangles with a large interior angle.</para>
</listitem><listitem><para>Supports holes</para>
</listitem><listitem><para>Generate a lot of garbage due to incapsulation of the Poly2Tri library.</para>
</listitem><listitem><para>Running time is O(n^2), n = number of vertices.</para>
</listitem><listitem><para>Does not care about winding order.</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/Decomposition/Triangulate.cs" line="13" column="11" bodyfile="Physics2D/Common/Decomposition/Triangulate.cs" bodystart="14" bodyend="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Physics2D/Common/Decomposition/BayazitDecomposer.cs" line="13" column="1"/>
  </compounddef>
</doxygen>
