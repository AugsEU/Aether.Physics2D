<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools" kind="class" language="C#" prot="public">
    <compoundname>tainicom::Aether::Physics2D::Common::LineTools</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1af45a41f119df44b3dc1810e065fe7571" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float tainicom.Aether.Physics2D.Common.LineTools.DistanceBetweenPointAndLineSegment</definition>
        <argsstring>(ref Vector2 point, ref Vector2 start, ref Vector2 end)</argsstring>
        <name>DistanceBetweenPointAndLineSegment</name>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/LineTools.cs" line="20" column="29" bodyfile="Physics2D/Common/LineTools.cs" bodystart="20" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1a6cecfb84e5790e4c22d03b17b664932c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool tainicom.Aether.Physics2D.Common.LineTools.LineIntersect2</definition>
        <argsstring>(ref Vector2 a0, ref Vector2 a1, ref Vector2 b0, ref Vector2 b1, out Vector2 intersectionPoint)</argsstring>
        <name>LineIntersect2</name>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>a0</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>a1</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>b0</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>b1</declname>
        </param>
        <param>
          <type>out <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>intersectionPoint</declname>
        </param>
        <briefdescription>
<para>Check if the lines a0-&gt;a1 and b0-&gt;b1 cross. If they do, intersectionPoint will be filled with the point of crossing. </para>
        </briefdescription>
        <detaileddescription>
<para>Grazing lines should not return true.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/LineTools.cs" line="48" column="28" bodyfile="Physics2D/Common/LineTools.cs" bodystart="48" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1a8d754a4a81fab0e86cc4f1daa5d9d6d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>static Vector2 tainicom.Aether.Physics2D.Common.LineTools.LineIntersect</definition>
        <argsstring>(Vector2 p1, Vector2 p2, Vector2 q1, Vector2 q2)</argsstring>
        <name>LineIntersect</name>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>q1</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>q2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/LineTools.cs" line="93" column="31" bodyfile="Physics2D/Common/LineTools.cs" bodystart="93" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1ab600b2e09280ecfb775f86c02a596cec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool tainicom.Aether.Physics2D.Common.LineTools.LineIntersect</definition>
        <argsstring>(ref Vector2 point1, ref Vector2 point2, ref Vector2 point3, ref Vector2 point4, bool firstIsSegment, bool secondIsSegment, out Vector2 point)</argsstring>
        <name>LineIntersect</name>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point4</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>firstIsSegment</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secondIsSegment</declname>
        </param>
        <param>
          <type>out <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>This method detects if two line segments (or lines) intersect, and, if so, the point of intersection. Use the <emphasis>firstIsSegment</emphasis>  and <emphasis>secondIsSegment</emphasis>  parameters to set whether the intersection point must be on the first and second line segments. Setting these both to true means you are doing a line-segment to line-segment intersection. Setting one of them to true means you are doing a line to line-segment intersection test, and so on. Note: If two line segments are coincident, then no intersection is detected (there are actually infinite intersection points). Author: Jeremy Bell </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the second line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point4</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the second line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>This is set to the intersection point if an intersection is detected.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstIsSegment</parametername>
</parameternamelist>
<parameterdescription>
<para>Set this to true to require that the intersection point be on the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondIsSegment</parametername>
</parameternamelist>
<parameterdescription>
<para>Set this to true to require that the intersection point be on the second line segment.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if an intersection is detected, false otherwise.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/LineTools.cs" line="137" column="28" bodyfile="Physics2D/Common/LineTools.cs" bodystart="137" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1ad76bf222867296d89ceab7199a6a5d3c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool tainicom.Aether.Physics2D.Common.LineTools.LineIntersect</definition>
        <argsstring>(Vector2 point1, Vector2 point2, Vector2 point3, Vector2 point4, bool firstIsSegment, bool secondIsSegment, out Vector2 intersectionPoint)</argsstring>
        <name>LineIntersect</name>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point4</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>firstIsSegment</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secondIsSegment</declname>
        </param>
        <param>
          <type>out <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>intersectionPoint</declname>
        </param>
        <briefdescription>
<para>This method detects if two line segments (or lines) intersect, and, if so, the point of intersection. Use the <emphasis>firstIsSegment</emphasis>  and <emphasis>secondIsSegment</emphasis>  parameters to set whether the intersection point must be on the first and second line segments. Setting these both to true means you are doing a line-segment to line-segment intersection. Setting one of them to true means you are doing a line to line-segment intersection test, and so on. Note: If two line segments are coincident, then no intersection is detected (there are actually infinite intersection points). Author: Jeremy Bell </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the second line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point4</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the second line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intersectionPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>This is set to the intersection point if an intersection is detected.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstIsSegment</parametername>
</parameternamelist>
<parameterdescription>
<para>Set this to true to require that the intersection point be on the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondIsSegment</parametername>
</parameternamelist>
<parameterdescription>
<para>Set this to true to require that the intersection point be on the second line segment.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if an intersection is detected, false otherwise.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/LineTools.cs" line="214" column="28" bodyfile="Physics2D/Common/LineTools.cs" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1a92b2bba7b0cc39a5747d210578ef8b9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool tainicom.Aether.Physics2D.Common.LineTools.LineIntersect</definition>
        <argsstring>(ref Vector2 point1, ref Vector2 point2, ref Vector2 point3, ref Vector2 point4, out Vector2 intersectionPoint)</argsstring>
        <name>LineIntersect</name>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point4</declname>
        </param>
        <param>
          <type>out <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>intersectionPoint</declname>
        </param>
        <briefdescription>
<para>This method detects if two line segments intersect, and, if so, the point of intersection. Note: If two line segments are coincident, then no intersection is detected (there are actually infinite intersection points). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the second line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point4</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the second line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intersectionPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>This is set to the intersection point if an intersection is detected.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if an intersection is detected, false otherwise.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/LineTools.cs" line="233" column="28" bodyfile="Physics2D/Common/LineTools.cs" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1ae02097e7e78db43d7480223e320aa86b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool tainicom.Aether.Physics2D.Common.LineTools.LineIntersect</definition>
        <argsstring>(Vector2 point1, Vector2 point2, Vector2 point3, Vector2 point4, out Vector2 intersectionPoint)</argsstring>
        <name>LineIntersect</name>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point4</declname>
        </param>
        <param>
          <type>out <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>intersectionPoint</declname>
        </param>
        <briefdescription>
<para>This method detects if two line segments intersect, and, if so, the point of intersection. Note: If two line segments are coincident, then no intersection is detected (there are actually infinite intersection points). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the first line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the second line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point4</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the second line segment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intersectionPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>This is set to the intersection point if an intersection is detected.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if an intersection is detected, false otherwise.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/LineTools.cs" line="252" column="28" bodyfile="Physics2D/Common/LineTools.cs" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1ae025b698835c8d1085b660cbac477020" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vertices" kindref="compound">Vertices</ref></type>
        <definition>static Vertices tainicom.Aether.Physics2D.Common.LineTools.LineSegmentVerticesIntersect</definition>
        <argsstring>(ref Vector2 point1, ref Vector2 point2, Vertices vertices)</argsstring>
        <name>LineSegmentVerticesIntersect</name>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vertices" kindref="compound">Vertices</ref></type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
<para>Get all intersections between a line segment and a list of vertices representing a polygon. The vertices reuse adjacent points, so for example edges one and two are between the first and second vertices and between the second and third vertices. The last edge is between vertex vertices.Count - 1 and verts0. (ie, vertices from a Geometry or AABB) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the line segment to test</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the line segment to test.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertices, as described above</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/LineTools.cs" line="267" column="32" bodyfile="Physics2D/Common/LineTools.cs" bodystart="267" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1a4f746320f2315bb40077eddbf1a36f38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vertices" kindref="compound">Vertices</ref></type>
        <definition>static Vertices tainicom.Aether.Physics2D.Common.LineTools.LineSegmentAABBIntersect</definition>
        <argsstring>(ref Vector2 point1, ref Vector2 point2, AABB aabb)</argsstring>
        <name>LineSegmentAABBIntersect</name>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type>ref <ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_vector2" kindref="compound">Vector2</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="structtainicom_1_1_aether_1_1_physics2_d_1_1_collision_1_1_a_a_b_b" kindref="compound">AABB</ref></type>
          <declname>aabb</declname>
        </param>
        <briefdescription>
<para>Get all intersections between a line segment and an AABB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the line segment to test</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the line segment to test.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aabb</parametername>
</parameternamelist>
<parameterdescription>
<para>The AABB that is used for testing intersection.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Physics2D/Common/LineTools.cs" line="289" column="32" bodyfile="Physics2D/Common/LineTools.cs" bodystart="289" bodyend="292"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Collection of helper methods for misc collisions. Does float tolerance and line collisions with lines and AABBs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Physics2D/Common/LineTools.cs" line="18" column="19" bodyfile="Physics2D/Common/LineTools.cs" bodystart="19" bodyend="293"/>
    <listofallmembers>
      <member refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1af45a41f119df44b3dc1810e065fe7571" prot="public" virt="non-virtual"><scope>tainicom::Aether::Physics2D::Common::LineTools</scope><name>DistanceBetweenPointAndLineSegment</name></member>
      <member refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1a8d754a4a81fab0e86cc4f1daa5d9d6d2" prot="public" virt="non-virtual"><scope>tainicom::Aether::Physics2D::Common::LineTools</scope><name>LineIntersect</name></member>
      <member refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1ab600b2e09280ecfb775f86c02a596cec" prot="public" virt="non-virtual"><scope>tainicom::Aether::Physics2D::Common::LineTools</scope><name>LineIntersect</name></member>
      <member refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1ad76bf222867296d89ceab7199a6a5d3c" prot="public" virt="non-virtual"><scope>tainicom::Aether::Physics2D::Common::LineTools</scope><name>LineIntersect</name></member>
      <member refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1a92b2bba7b0cc39a5747d210578ef8b9e" prot="public" virt="non-virtual"><scope>tainicom::Aether::Physics2D::Common::LineTools</scope><name>LineIntersect</name></member>
      <member refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1ae02097e7e78db43d7480223e320aa86b" prot="public" virt="non-virtual"><scope>tainicom::Aether::Physics2D::Common::LineTools</scope><name>LineIntersect</name></member>
      <member refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1a6cecfb84e5790e4c22d03b17b664932c" prot="public" virt="non-virtual"><scope>tainicom::Aether::Physics2D::Common::LineTools</scope><name>LineIntersect2</name></member>
      <member refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1a4f746320f2315bb40077eddbf1a36f38" prot="public" virt="non-virtual"><scope>tainicom::Aether::Physics2D::Common::LineTools</scope><name>LineSegmentAABBIntersect</name></member>
      <member refid="classtainicom_1_1_aether_1_1_physics2_d_1_1_common_1_1_line_tools_1ae025b698835c8d1085b660cbac477020" prot="public" virt="non-virtual"><scope>tainicom::Aether::Physics2D::Common::LineTools</scope><name>LineSegmentVerticesIntersect</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
